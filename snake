#include<iostream>
#include<fstream>
#include<conio.h>
#include<Windows.h>
using namespace std;
fstream in("score.txt" , ios::out | ios::in | ios::app);

char restart = 'y';
bool gameOver;
const int width = 20;
const int height = 20;
int x, y,fruitX,fruitY,score;
int tailX[100], tailY[100];
int nTail;
int speed = 50;
int MaxScore;
int level = 1,ScoreToLevel=50,Xp;


enum eDirection{STOP=0,LEFT,RIGHT,UP,DOWN};
eDirection dir,aux;

void LevelUp()
{
	if (score == ScoreToLevel)
	{
		level++;
		ScoreToLevel *= 2;
		nTail = nTail - level*2;
		if (nTail < 4)
			speed = 50;
	}
}

void Setup()
{
	gameOver = false;
	dir = STOP;
	x = width / 2;
	y = height / 2;
	fruitX = rand() % width;
	fruitY = rand() % height;
	score = 0;
	nTail = 0;
	while (in >> MaxScore)
	{

	}
	
	in.clear();
}

void clearscreen()
{
	HANDLE hOut;
	COORD Position;

	hOut = GetStdHandle(STD_OUTPUT_HANDLE);

	Position.X = 0;
	Position.Y = 0;
	SetConsoleCursorPosition(hOut, Position);
}

void Draw()
{
	clearscreen();

	for (int i = 0; i < width + 2; i++)
		cout << "#";
	cout << endl;
	for (int i = 0; i < height; i++)
	{
		for (int j = 0; j < width; j++)
		{
			if (j == 0)
				cout << "#";

			if (i == y && j == x)
				cout << "O";
			else if (i == fruitY && j == fruitX)
				cout << "F";
			else {
				bool print = false;
				for (int k = 0; k < nTail; k++)
				{

					if (tailX[k] == j && tailY[k] == i)
					{
						cout << "o";
						print = true;
					}

				}
				if (!print)
					cout << " ";
				
			}
			if (j == width - 1)
				cout << "#";
		}

		cout << endl;
	}
	for (int i = 0; i < width + 2; i++)
		cout << "#";

	

		cout << endl;
		cout << "MAX SCORE : " << MaxScore << endl;
		cout << "Score:" << score << endl;
		cout << "Level:" << level << endl;
		cout << "Xp : " << Xp << endl;
		cout << "Exp for Level: " << ScoreToLevel << endl;
	}


void Input()
{
	if (_kbhit())
	{
		switch (_getch())
		{
		case 'a':
			if(aux!=RIGHT || nTail<1)
				dir = LEFT;
			break;
		case 'd':
			if (aux != LEFT || nTail<1)
				dir = RIGHT;
			break;
		case 'w':
			if (aux != DOWN || nTail<1)
				dir = UP;
			break;
		case 's':
			if (aux != UP || nTail<1)
				dir = DOWN;
			break;
		case 'q':
			restart='n';
			break;

		}
		aux = dir;
	}

}

void Logic()
{
	int prevX = tailX[0];
	int prevY = tailY[0];
	int prev2X, prev2Y;
	tailX[0] = x;
	tailY[0] = y;
	for (int i = 1; i < nTail; i++)
	{
		prev2X = tailX[i];
		prev2Y = tailY[i];
		tailX[i] = prevX;
		tailY[i] = prevY;
		prevX = prev2X;
		prevY = prev2Y;
	}
	
	switch (dir)
	{
	case LEFT:
			x--;	
		break;
	case RIGHT:
			x++;
		break;
	case UP:
			y--;
		break;
	case DOWN:
			y++;
		break;
	default:
		break;
	}
	
	

	if (x >= width)
		x = 0;
	else if (x < 0)
		x = width - 1;
	if (y >= height)
		y = 0;
	else if (y < 0)
		y = height - 1;

	for (int i = 0; i < nTail; i++)
		if (tailX[i] == x && tailY[i] == y) {
			gameOver = true;
			cout << "GAME OVER!" << endl;

			if (score > MaxScore) {
				in <<" "<< score;	
			}
			
		}
	if (x == fruitX && y == fruitY)
	{
		
		score += 10;
		fruitX = rand() % width;
		fruitY = rand() % height;
		nTail++;
		speed+=2;
		Xp += 10;
		LevelUp();
	}
}

int main()
{
	Setup();
	char chose;
	cout << "START GAME PRESS  (s)" << endl;
	cout << "QUIT (q)" << endl;
	cin >> chose;
	if (chose == 's' || chose == 'S') {
		
		while (restart=='y') {
			Draw();
			Input();
			Logic();
			Sleep(speed);
			if (gameOver) {
				cout << "Restart? (y/n)" << endl;
				cin >> restart;
				if (restart == 'y') {
					gameOver = false;
					Setup();
				}
			}
			
		}
		system("cls");
		cout << "\n\n\n\n\n\n";
		cout << endl << "\t\t\t\t\tGAME OVER!";
		cout << "\n\n\n\n\n\n";
		cout << endl << endl;
	}
	if(chose=='q' || chose== 'Q')
	cout << "\n\n\n\t\t\tGOOD BY! \n\n\n\n\n" << endl;

	system("pause");
	return 0;
}
